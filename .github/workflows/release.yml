
name: Build and Upload Release
 
on: 
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release Tag'     
        required: true
        default: '1.0.0'

jobs:
  create-release:
    runs-on: ubuntu-20.04
   
    steps:
      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
          tag_name: ${{ github.event.inputs.release_tag }}
          # The name of the release. For example, `Release v1.0.1`
          release_name: ${{ github.event.inputs.release_tag }}
      - shell: bash
        run: |
          expr "${{ steps.create_release.outputs.upload_url }}" > upload_url.txt
      
      - name: Upload URL
        uses: actions/upload-artifact@v3
        with:
          name: upload_url
          path: upload_url.txt
  
  build:
    runs-on: ubuntu-20.04
    needs: [create-release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Cache Deno
        run: deno cache deps.ts

      - name: Build for Windows
        run: deno compile --allow-read --allow-write --allow-net --allow-env --allow-run --target x86_64-pc-windows-msvc -o pieront-windows.exe main.ts

      - name: Build for linux
        run: deno compile --allow-read --allow-write --allow-net --allow-env --allow-run --target x86_64-unknown-linux-gnu -o pieront-linux main.ts

      - name: Download URL
        uses: actions/download-artifact@v2
        with:
          name: upload_url
        
      - name: Read URL
        id: url
        uses: juliangruber/read-file-action@74dc4b4435b60f96f84bcba916659c779f46ba0a
        with:
          path: upload_url.txt

      - name: Upload Windows CLI Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.url.outputs.content }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: pieront-windows.exe
          asset_name: pieront-${{ github.event.inputs.release_tag }}-windows.exe
          asset_content_type: application/x-executable

      - name: Upload Linux CLI Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.url.outputs.content }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: pieront-linux
          asset_name: pieront-${{ github.event.inputs.release_tag }}-linux
          asset_content_type: application/x-executable